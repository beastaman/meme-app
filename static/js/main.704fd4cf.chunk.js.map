{"version":3,"sources":["assets/app-icon.svg","config/globalStyles.js","context/MemeContext.js","components/layout/AppWrapper.js","components/layout/Container.js","components/layout/MainContent.js","components/global/Title.js","components/global/Icon.js","components/App/UploadImage/ImageWrapper.js","components/App/UploadImage/ImageLabel.js","components/App/UploadImage/ImageInput.js","components/App/UploadImage/ImageCaption.js","utils/index.js","components/App/UploadImage/ActiveImage.js","components/App/UploadImage/NoImage.js","components/App/UploadImage/index.js","components/App/TextImage/TextWrapper.js","components/App/TextImage/TextLegenda.js","components/global/form/WrapInput.js","components/global/form/Label.js","components/global/form/Input.js","components/global/form/Range.js","components/global/form/Switch.js","components/App/TextImage/index.js","components/global/Button.js","components/App/GenerateImage/Wrapper.js","components/App/GenerateImage/Meme.js","components/App/GenerateImage/index.js","components/App/index.js","serviceWorker.js","index.js","config/theme.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","theme","typography","mainFont","baseFont","colorFont","backColor","initialState","topText","topTextPos","topTextSize","bottomText","bottomTextPos","bottomTextSize","textOutside","imageSelected","MemeContext","createContext","Provider","StateProvider","children","useReducer","state","action","type","payload","Error","dispatch","value","AppWrapper","styled","div","layout","smWidth","Container","maxWidth","MainContent","section","Title","h1","margin","fsize","props","primary","colors","tertiary","xsWidth","css","Icon","img","ImageWrapper","mdWidth","ImageLabel","label","attrs","htmlFor","active","secondary","ImageInput","input","id","accept","Caption","normal","quaternary","ImageCaption","bytes","meme","useContext","name","size","toFixed","Wrapper","black","Text","outside","bold","pos","posPlace","Image","src","path","alt","altimg","ActiveImage","NoImage","white","UpdateImage","useEffect","firstInput","document","getElementById","focus","select","caption","onChange","e","target","files","newImage","URL","createObjectURL","TextWrapper","TextLegenda","p","WrapInput","flex","Label","default","Input","intype","Range","StyledSwitch","lightGray","Switch","checked","disabled","onSwitch","TextImage","handleTextPos","handleTextSize","className","as","min","max","step","console","log","Btn","button","gray","ShadowButton","Button","handleClick","isDisabled","onClick","InnerContainer","MemeTitle","Close","Meme","close","href","download","GenerateImage","memeImage","useState","image","setImage","htmlToImage","toPng","then","dataUrl","crossOrigin","catch","error","App","logo","UploadImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.704fd4cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/app-icon.3b675fd3.svg\";","import { createGlobalStyle } from 'styled-components';\r\nimport 'typeface-open-sans';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *,\r\n    *::before,\r\n    *::after {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n        font-family: ${({ theme }) => theme.typography.mainFont};\r\n        font-size: ${({ theme }) => theme.typography.baseFont};\r\n    }\r\n\r\n    body {\r\n        color: ${({ theme }) => theme.typography.colorFont};\r\n        background: ${({ theme }) => theme.typography.backColor}\r\n    }\r\n\r\n    img{\r\n        max-width: 100%;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React, { createContext, useReducer } from 'react';\r\n\r\nconst initialState = {\r\n    topText: 'Top Text',\r\n    topTextPos: 5,\r\n    topTextSize: 2,\r\n    bottomText: 'Bottom Text',\r\n    bottomTextPos: 5,\r\n    bottomTextSize: 2,\r\n    textOutside: false,\r\n    imageSelected: null,\r\n};\r\n\r\nconst MemeContext = createContext(initialState);\r\nconst { Provider } = MemeContext;\r\n\r\nconst StateProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer((state, action) => {\r\n        // ACTIONS\r\n        switch (action.type) {\r\n            case 'UPDATE_TOP':\r\n                return {\r\n                    ...state,\r\n                    topText: action.payload,\r\n                };\r\n            case 'UPDATE_BOTTOM':\r\n                return {\r\n                    ...state,\r\n                    bottomText: action.payload,\r\n                };\r\n            case 'UPDATE_TOP_POS':\r\n                return {\r\n                    ...state,\r\n                    topTextPos: action.payload,\r\n                };\r\n            case 'UPDATE_BOTTOM_POS':\r\n                return {\r\n                    ...state,\r\n                    bottomTextPos: action.payload,\r\n                };\r\n            case 'UPDATE_TOP_SIZE':\r\n                return {\r\n                    ...state,\r\n                    topTextSize: action.payload,\r\n                };\r\n            case 'UPDATE_BOTTOM_SIZE':\r\n                return {\r\n                    ...state,\r\n                    bottomTextSize: action.payload,\r\n                };\r\n            case 'TEXT_OUTSIDE':\r\n                return {\r\n                    ...state,\r\n                    textOutside: !state.textOutside,\r\n                };\r\n            case 'IMAGE_SELECTED':\r\n                return {\r\n                    ...state,\r\n                    imageSelected: action.payload,\r\n                };\r\n            case 'RESET_MEME':\r\n                return initialState;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    }, initialState);\r\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { MemeContext, StateProvider };\r\n","import styled from 'styled-components';\r\n\r\nconst AppWrapper = styled.div`\r\n    margin: 3rem 0;\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.smWidth}) {\r\n        margin: 1rem 0;\r\n    }\r\n`;\r\n\r\nexport default AppWrapper;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    max-width: ${({ theme }) => theme.layout.maxWidth};\r\n    margin: 0 auto;\r\n    padding: 0 1rem;\r\n`;\r\n\r\nexport default Container;\r\n","import styled from 'styled-components';\r\n\r\nconst MainContent = styled.section`\r\n    display: flex;\r\n    margin-bottom: 3rem;\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.smWidth}) {\r\n        flex-direction: column;\r\n    }\r\n`;\r\n\r\nexport default MainContent;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst Title = styled.h1`\r\n    margin: ${({ margin }) => margin};\r\n    font-size: ${({ fsize }) => fsize}em;\r\n    color: ${props =>\r\n        props.primary\r\n            ? props.theme.colors.primary\r\n            : props.theme.colors.tertiary};\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.xsWidth}) {\r\n        ${props =>\r\n            props.primary &&\r\n            css`\r\n                font-size: 1.6em;\r\n                img {\r\n                    display: none;\r\n                }\r\n            `}\r\n    }\r\n`;\r\n\r\nexport default Title;\r\n","import styled from 'styled-components';\r\n\r\nconst Icon = styled.img`\r\n    transform: translateY(-3px);\r\n    width: 40px;\r\n    margin-right: 0.75rem;\r\n    vertical-align: middle;\r\n    border-radius: 4px;\r\n`;\r\n\r\nexport default Icon;\r\n","import styled from 'styled-components';\r\n\r\nconst ImageWrapper = styled.div`\r\n    position: relative;\r\n    width: 50%;\r\n    padding-right: 4rem;\r\n    transition: height 0.4s;\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.mdWidth}) {\r\n        padding-right: 1rem;\r\n    }\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.smWidth}) {\r\n        width: 100%;\r\n        margin-bottom: 2rem;\r\n        padding-right: 0;\r\n    }\r\n`;\r\nexport default ImageWrapper;\r\n","import styled from 'styled-components';\r\n\r\nconst ImageLabel = styled.label.attrs({\r\n    htmlFor: 'up-img',\r\n})`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 1rem;\r\n    min-height: ${({ active }) => (active ? '0px' : '450px')};\r\n    background-color: ${({ theme }) => theme.colors.secondary};\r\n    border-radius: 5px;\r\n    cursor: pointer;\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.xsWidth}) {\r\n        min-height: ${({ active }) => (active ? '0px' : '300px')};\r\n    }\r\n`;\r\n\r\nexport default ImageLabel;\r\n","import styled from 'styled-components';\r\n\r\nconst ImageInput = styled.input.attrs({\r\n    id: 'up-img',\r\n    type: 'file',\r\n    accept: 'image/*',\r\n})`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: -100;\r\n    opacity: 0;\r\n`;\r\n\r\nexport default ImageInput;\r\n","import React, { useContext } from 'react';\r\nimport { MemeContext } from '../../../context/MemeContext';\r\nimport styled from 'styled-components';\r\nimport { formatSizeUnits } from '../../../utils';\r\n\r\nconst Caption = styled.div`\r\n    margin-bottom: 1rem;\r\n    p {\r\n        font-size: 0.875em;\r\n        b {\r\n            font-weight: ${({ theme }) => theme.typography.normal};\r\n            color: ${({ theme }) => theme.colors.quaternary};\r\n        }\r\n    }\r\n`;\r\n\r\nconst ImageCaption = () => {\r\n    // Global state\r\n    // state to read and dispatch to modify\r\n    const meme = useContext(MemeContext);\r\n\r\n    return (\r\n        <Caption>\r\n            <p>\r\n                <b>Image name:</b> {meme.state.imageSelected.name}\r\n            </p>\r\n            <p>\r\n                <b>Image size:</b>{' '}\r\n                {formatSizeUnits(meme.state.imageSelected.size)}\r\n            </p>\r\n        </Caption>\r\n    );\r\n};\r\n\r\nexport default ImageCaption;\r\n","/****************************************************************\r\n * App Utilities functions\r\n ****************************************************************/\r\n\r\n/**\r\n * Convert from bytes to KB, MB or GB\r\n * @param {number} bytes number to be converted from bytes to\r\n */\r\nfunction formatSizeUnits(bytes) {\r\n    // Check if number\r\n    if (typeof bytes !== 'number') {\r\n        return bytes;\r\n    }\r\n\r\n    let format;\r\n    // Check\r\n    if (bytes >= 1073741824) {\r\n        format = (bytes / 1073741824).toFixed(2) + ' GB';\r\n    } else if (bytes >= 1048576) {\r\n        format = (bytes / 1048576).toFixed(2) + ' MB';\r\n    } else {\r\n        format = (bytes / 1024).toFixed(2) + ' KB';\r\n    }\r\n    return format;\r\n}\r\n\r\nexport { formatSizeUnits };\r\n","import React, { useContext } from 'react';\r\nimport { MemeContext } from '../../../context/MemeContext';\r\nimport styled, { css } from 'styled-components';\r\n\r\n// Sub components\r\nconst Wrapper = styled.div.attrs({\r\n    id: 'active-image',\r\n})`\r\n    position: relative;\r\n    width: 100%;\r\n    background: ${({ theme }) => theme.colors.black};\r\n`;\r\n\r\nconst Text = styled.div`\r\n    position: ${props => (props.outside ? 'static' : 'absolute')};\r\n    left: 0;\r\n    width: 100%;\r\n    padding: ${props => (props.outside ? '0.25rem 1rem' : '0 1rem')};\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n    line-height: 1.2;\r\n    font-weight: ${({ theme }) => theme.typography.bold};\r\n    font-size: ${props => props.fsize}em;\r\n    text-shadow: 0px 0px 5px ${({ theme }) => theme.colors.black};\r\n    ${props =>\r\n        !props.outside &&\r\n        props.pos === 'top' &&\r\n        css`\r\n            top: ${props => props.posPlace}%;\r\n        `}\r\n    ${props =>\r\n        !props.outside &&\r\n        props.pos === 'bottom' &&\r\n        css`\r\n            bottom: ${props => props.posPlace}%;\r\n        `}\r\n`;\r\n\r\nconst Image = styled.img.attrs(({ path, altimg }) => ({\r\n    src: path,\r\n    alt: altimg,\r\n}))`\r\n    display: block;\r\n    width: 100%;\r\n`;\r\n\r\n// Main Components\r\nconst ActiveImage = () => {\r\n    // Global state\r\n    // state to read and dispatch to modify\r\n    const meme = useContext(MemeContext);\r\n\r\n    return (\r\n        <Wrapper>\r\n            {meme.state.topText && (\r\n                <Text\r\n                    pos=\"top\"\r\n                    posPlace={meme.state.topTextPos}\r\n                    fsize={meme.state.topTextSize}\r\n                    outside={meme.state.textOutside}\r\n                >\r\n                    {meme.state.topText}\r\n                </Text>\r\n            )}\r\n            <Image\r\n                path={meme.state.imageSelected.path}\r\n                altimg={meme.state.imageSelected.name}\r\n            />\r\n            {meme.state.bottomText && (\r\n                <Text\r\n                    pos=\"bottom\"\r\n                    posPlace={meme.state.bottomTextPos}\r\n                    fsize={meme.state.bottomTextSize}\r\n                    outside={meme.state.textOutside}\r\n                >\r\n                    {meme.state.bottomText}\r\n                </Text>\r\n            )}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default ActiveImage;\r\n","import styled from 'styled-components';\r\n\r\nconst NoImage = styled.div`\r\n    width: 100%;\r\n    padding: 1rem;\r\n    text-align: center;\r\n    font-weight: ${({ theme }) => theme.typography.bold};\r\n    font-size: 2em;\r\n    color: ${({ theme }) => theme.colors.white};\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.xsWidth}) {\r\n        font-size: 1.5em;\r\n    }\r\n`;\r\n\r\nexport default NoImage;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { MemeContext } from '../../../context/MemeContext';\r\nimport ImageWrapper from './ImageWrapper';\r\nimport ImageLabel from './ImageLabel';\r\nimport ImageInput from './ImageInput';\r\nimport ImageCaption from './ImageCaption';\r\nimport ActiveImage from './ActiveImage';\r\nimport NoImage from './NoImage';\r\n\r\nconst UpdateImage = () => {\r\n    // Global state\r\n    // state to read and dispatch to modify\r\n    const meme = useContext(MemeContext);\r\n\r\n    // Set focus at first text input after setting the meme image\r\n    useEffect(() => {\r\n        const firstInput = document.getElementById('text-top');\r\n        firstInput.focus();\r\n        firstInput.select();\r\n    }, [meme.state.imageSelected]);\r\n\r\n    // Methods\r\n    const handleLocalImage = e => {\r\n        const img = e.target.files[0];\r\n        const newImage = {\r\n            name: img.name,\r\n            size: img.size,\r\n            path: URL.createObjectURL(img),\r\n        };\r\n\r\n        if (!meme.state.imageSelected) {\r\n            meme.dispatch({ type: 'IMAGE_SELECTED', payload: newImage });\r\n        }\r\n    };\r\n\r\n    // Render\r\n    let label, caption;\r\n    if (meme.state.imageSelected) {\r\n        label = <ActiveImage />;\r\n        caption = <ImageCaption />;\r\n    } else {\r\n        label = <NoImage>Upload an image from your computer</NoImage>;\r\n    }\r\n\r\n    return (\r\n        <ImageWrapper>\r\n            <ImageLabel active={meme.state.imageSelected !== null}>\r\n                {label}\r\n            </ImageLabel>\r\n            <ImageInput onChange={handleLocalImage} />\r\n            {caption}\r\n        </ImageWrapper>\r\n    );\r\n};\r\nexport default UpdateImage;\r\n","import styled from 'styled-components';\r\n\r\nconst TextWrapper = styled.section`\r\n    width: 50%;\r\n    opacity: 0.5;\r\n    transition: opacity 0.4s;\r\n    &.active {\r\n        opacity: 1;\r\n    }\r\n\r\n    @media all and (max-width: ${({ theme }) => theme.layout.smWidth}) {\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\nexport default TextWrapper;\r\n","import styled from 'styled-components';\r\n\r\nconst TextLegenda = styled.p`\r\n    font-style: italic;\r\n    font-size: 0.875em;\r\n`;\r\n\r\nexport default TextLegenda;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst WrapInput = styled.div`\r\n    margin-bottom: 1rem;\r\n    ${props =>\r\n        props.flex &&\r\n        css`\r\n            display: flex;\r\n            & > div {\r\n                margin-right: 1rem;\r\n                transition: opacity 0.4s;\r\n                &:last-child {\r\n                    margin-right: 0;\r\n                }\r\n                &.inactive {\r\n                    opacity: 0.25;\r\n                }\r\n            }\r\n        `}\r\n`;\r\n\r\nexport default WrapInput;\r\n","import styled from 'styled-components';\r\n\r\nconst Label = styled.label`\r\n    display: block;\r\n    margin-bottom: 0.5rem;\r\n    color: ${props =>\r\n        props.primary\r\n            ? props.theme.colors.primary\r\n            : props.theme.colors.default};\r\n    span {\r\n        display: inline-block;\r\n        transform: translateY(-1px);\r\n        font-size: 0.75em;\r\n        color: ${({ theme }) => theme.colors.quaternary};\r\n    }\r\n`;\r\n\r\nexport default Label;\r\n","import styled from 'styled-components';\r\n\r\n/**\r\n * Input component\r\n * @param {string} intype - the type to assign at the input HTML element\r\n */\r\nconst Input = styled.input.attrs(props => ({\r\n    type: props.intype,\r\n}))`\r\n    width: 100%;\r\n    height: 40px;\r\n    line-height: 40px;\r\n    padding: 0 1rem;\r\n    background-color: rgba(255, 255, 255, 0.65);\r\n    border: none;\r\n    border-radius: 4px;\r\n    outline: none;\r\n    transition: background 0.4s;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n    }\r\n    &:focus {\r\n        background-color: rgba(255, 255, 255, 1);\r\n    }\r\n`;\r\n\r\nexport default Input;\r\n","import styled from 'styled-components';\r\n\r\nconst Range = styled.input.attrs({\r\n    type: 'range',\r\n})`\r\n    appearance: none; /*removes default webkit styles*/\r\n    width: 100%;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    &:disabled {\r\n        cursor: not-allowed;\r\n    }\r\n\r\n    /* Thumb */\r\n    &::-webkit-slider-thumb {\r\n        /*Chrome, Opera, Safari*/\r\n        appearance: none;\r\n        border: none;\r\n        height: 12px;\r\n        width: 12px;\r\n        border-radius: 50%;\r\n        background: ${({ theme }) => theme.colors.quaternary};\r\n        margin-top: -5px;\r\n    }\r\n    &::-moz-range-thumb {\r\n        /* Firefox */\r\n        appearance: none;\r\n        border: none;\r\n        height: 12px;\r\n        width: 12px;\r\n        border-radius: 50%;\r\n        background: ${({ theme }) => theme.colors.quaternary};\r\n        margin-top: -5px;\r\n    }\r\n    /* Track */\r\n    &::-webkit-slider-runnable-track {\r\n        /*Chrome, Opera, Safari*/\r\n        width: 100%;\r\n        height: 2px;\r\n        background: ${({ theme }) => theme.colors.white};\r\n        border: none;\r\n        border-radius: 3px;\r\n    }\r\n    &::-moz-range-track {\r\n        /* Firefox */\r\n        width: 100%;\r\n        height: 2px;\r\n        background: ${({ theme }) => theme.colors.white};\r\n        border: none;\r\n        border-radius: 3px;\r\n    }\r\n    /* Focus */\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n    &:focus::-webkit-slider-thumb {\r\n        background: ${({ theme }) => theme.colors.tertiary};\r\n    }\r\n    &:focus::-moz-range-thumb {\r\n        background: ${({ theme }) => theme.colors.tertiary};\r\n    }\r\n`;\r\n\r\nexport default Range;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst size = 40;\r\n\r\nconst StyledSwitch = styled.div`\r\n    position: relative;\r\n\r\n    input[type='checkbox'] {\r\n        position: absolute;\r\n        top: 0;\r\n        left: 0;\r\n        z-index: -10;\r\n        opacity: 0;\r\n        &:checked + label {\r\n            &::after {\r\n                left: ${size / 2}px;\r\n                background: ${({ theme }) => theme.colors.quaternary};\r\n            }\r\n        }\r\n        &:focus + label::after {\r\n            background: ${({ theme }) => theme.colors.tertiary};\r\n        }\r\n        &:disabled {\r\n            & + label::before,\r\n            & + label::after {\r\n                cursor: not-allowed;\r\n            }\r\n        }\r\n    }\r\n\r\n    label {\r\n        position: relative;\r\n        padding-left: ${size + 15}px;\r\n        color: ${({ theme }) => theme.colors.primary};\r\n        &::before,\r\n        &::after {\r\n            content: '';\r\n            position: absolute;\r\n            top: 2px;\r\n            left: 0;\r\n            border-radius: ${size / 2}px;\r\n        }\r\n        &::before {\r\n            width: ${size}px;\r\n            height: ${size / 2}px;\r\n            background: ${({ theme }) => theme.colors.white};\r\n        }\r\n        &::after {\r\n            width: ${size / 2}px;\r\n            height: ${size / 2}px;\r\n            background: ${({ theme }) => theme.colors.lightGray};\r\n            transition: left 0.4s, background-color 0.4s;\r\n        }\r\n    }\r\n`;\r\n\r\n/**\r\n * Custom Swtich element (on / off)\r\n * @param {string} label - Label text for the element\r\n * @param {boolean} checked - Value to set for the element\r\n * @param {boolean} disabled - Control the possibility of interaction\r\n * @param {event} onSwitch - Event handler at the switch of the element\r\n */\r\nconst Switch = ({ label, checked, disabled, onSwitch }) => {\r\n    return (\r\n        <StyledSwitch>\r\n            <input\r\n                id=\"text-include\"\r\n                type=\"checkbox\"\r\n                checked={checked}\r\n                disabled={disabled}\r\n                onChange={onSwitch}\r\n            />\r\n            <label htmlFor=\"text-include\">{label}</label>\r\n        </StyledSwitch>\r\n    );\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useContext } from 'react';\r\nimport { MemeContext } from '../../../context/MemeContext';\r\nimport TextWrapper from './TextWrapper';\r\nimport TextLegenda from './TextLegenda';\r\nimport Title from '../../global/Title';\r\nimport WrapInput from '../../global/form/WrapInput';\r\nimport Label from '../../global/form/Label';\r\nimport Input from '../../global/form/Input';\r\nimport Range from '../../global/form/Range';\r\nimport Switch from '../../global/form/Switch';\r\n\r\nconst TextImage = () => {\r\n    // Global state\r\n    // state to read and dispatch to modify\r\n    const meme = useContext(MemeContext);\r\n\r\n    const handleTopText = e => {\r\n        meme.dispatch({ type: 'UPDATE_TOP', payload: e.target.value });\r\n    };\r\n\r\n    const handleBottomText = e => {\r\n        meme.dispatch({ type: 'UPDATE_BOTTOM', payload: e.target.value });\r\n    };\r\n\r\n    const handleTextPos = (e, pos) => {\r\n        if (pos === 'top') {\r\n            meme.dispatch({ type: 'UPDATE_TOP_POS', payload: e.target.value });\r\n        } else {\r\n            meme.dispatch({\r\n                type: 'UPDATE_BOTTOM_POS',\r\n                payload: e.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTextSize = (e, pos) => {\r\n        if (pos === 'top') {\r\n            meme.dispatch({ type: 'UPDATE_TOP_SIZE', payload: e.target.value });\r\n        } else {\r\n            meme.dispatch({\r\n                type: 'UPDATE_BOTTOM_SIZE',\r\n                payload: e.target.value,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTextOutside = e => {\r\n        console.log(e.target.value);\r\n        meme.dispatch({ type: 'TEXT_OUTSIDE' });\r\n    };\r\n\r\n    // Render\r\n    return (\r\n        <TextWrapper className={meme.state.imageSelected ? 'active' : ''}>\r\n            <Title as=\"h3\" fsize=\"1.5\" margin=\"0 0 1rem\">\r\n                Set your text here\r\n            </Title>\r\n\r\n            {/* Top Text */}\r\n            <WrapInput>\r\n                <Label primary htmlFor=\"text-top\">\r\n                    Top text\r\n                </Label>\r\n                <Input\r\n                    intype=\"text\"\r\n                    id=\"text-top\"\r\n                    onChange={handleTopText}\r\n                    value={meme.state.topText}\r\n                    disabled={!meme.state.imageSelected}\r\n                />\r\n            </WrapInput>\r\n\r\n            <WrapInput flex>\r\n                <div className={meme.state.textOutside ? 'inactive' : ''}>\r\n                    <Label htmlFor=\"pos-top\">\r\n                        Text position <span>[ {meme.state.topTextPos} ]</span>\r\n                    </Label>\r\n                    <Range\r\n                        id=\"pos-top\"\r\n                        min=\"0\"\r\n                        max=\"50\"\r\n                        value={meme.state.topTextPos}\r\n                        disabled={\r\n                            !meme.state.imageSelected || meme.state.textOutside\r\n                        }\r\n                        onChange={e => handleTextPos(e, 'top')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Label htmlFor=\"size-top\">\r\n                        Text size <span>[ {meme.state.topTextSize} ]</span>\r\n                    </Label>\r\n                    <Range\r\n                        id=\"size-top\"\r\n                        min=\"1\"\r\n                        max=\"4\"\r\n                        step=\"0.1\"\r\n                        value={meme.state.topTextSize}\r\n                        disabled={!meme.state.imageSelected}\r\n                        onChange={e => handleTextSize(e, 'top')}\r\n                    />\r\n                </div>\r\n            </WrapInput>\r\n\r\n            {/* Bottom Text */}\r\n            <WrapInput>\r\n                <Label primary htmlFor=\"text-bottom\">\r\n                    Bottom text\r\n                </Label>\r\n                <Input\r\n                    intype=\"text\"\r\n                    id=\"text-bottom\"\r\n                    onChange={handleBottomText}\r\n                    value={meme.state.bottomText}\r\n                    disabled={!meme.state.imageSelected}\r\n                />\r\n            </WrapInput>\r\n\r\n            <WrapInput flex>\r\n                <div className={meme.state.textOutside ? 'inactive' : ''}>\r\n                    <Label htmlFor=\"pos-bottom\">\r\n                        Text position{' '}\r\n                        <span>[ {meme.state.bottomTextPos} ]</span>\r\n                    </Label>\r\n                    <Range\r\n                        id=\"pos-bottom\"\r\n                        min=\"0\"\r\n                        max=\"50\"\r\n                        value={meme.state.bottomTextPos}\r\n                        disabled={\r\n                            !meme.state.imageSelected || meme.state.textOutside\r\n                        }\r\n                        onChange={e => handleTextPos(e, 'bottom')}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Label htmlFor=\"size-bottom\">\r\n                        Text size <span>[ {meme.state.bottomTextSize} ]</span>\r\n                    </Label>\r\n                    <Range\r\n                        id=\"size-bottom\"\r\n                        min=\"1\"\r\n                        max=\"4\"\r\n                        step=\"0.1\"\r\n                        value={meme.state.bottomTextSize}\r\n                        disabled={!meme.state.imageSelected}\r\n                        onChange={e => handleTextSize(e, 'bottom')}\r\n                    />\r\n                </div>\r\n            </WrapInput>\r\n\r\n            {/* Text outside */}\r\n            <WrapInput>\r\n                <Switch\r\n                    primary={true}\r\n                    label=\"Text outside the image\"\r\n                    checked={meme.state.textOutside}\r\n                    disabled={!meme.state.imageSelected}\r\n                    onSwitch={handleTextOutside}\r\n                />\r\n            </WrapInput>\r\n\r\n            <TextLegenda>* Both of the above texts are optional.</TextLegenda>\r\n        </TextWrapper>\r\n    );\r\n};\r\n\r\nexport default TextImage;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\n// Styled components\r\nconst Btn = styled.button`\r\n    appearance: none;\r\n    display: inline-block;\r\n    padding: 0.75rem 1.5rem;\r\n    font-weight: ${({ theme }) => theme.typography.bold};\r\n    font-size: 16px;\r\n    color: rgba(0, 0, 0, 0.6);\r\n    border: 0;\r\n    border-radius: 40px;\r\n    outline: none;\r\n    cursor: pointer;\r\n    transition: background-color 0.4s, color 0.4s, opacity 0.4s;\r\n    /* Modifica singola proprietà */\r\n    background: ${props =>\r\n        props.primary\r\n            ? props.theme.colors.primary\r\n            : props.theme.colors.default};\r\n    /* Modifica molteplici proprietà */\r\n    ${({ margin }) =>\r\n        margin &&\r\n        css`\r\n            margin: ${margin};\r\n        `}\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.white};\r\n        background: ${({ theme }) => theme.colors.gray};\r\n    }\r\n\r\n    &:disabled {\r\n        opacity: 0.5;\r\n        cursor: not-allowed;\r\n        color: rgba(0, 0, 0, 0.6);\r\n        background: ${props =>\r\n            props.primary\r\n                ? props.theme.colors.primary\r\n                : props.theme.colors.default};\r\n    }\r\n`;\r\n\r\n// Override a component (your own or 3rd party like materia-ui)\r\nconst ShadowButton = styled(Btn)`\r\n    box-shadow: 0 4px 7px rgba(0, 0, 0, 0.25);\r\n`;\r\n\r\n// Main Component\r\nconst Button = ({ primary, margin, children, handleClick, isDisabled }) => {\r\n    // Render\r\n    return (\r\n        <ShadowButton\r\n            primary={primary}\r\n            margin={margin}\r\n            onClick={handleClick}\r\n            disabled={isDisabled}\r\n        >\r\n            {children}\r\n        </ShadowButton>\r\n    );\r\n};\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.section`\r\n    text-align: center;\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Title from '../../global/Title';\r\n\r\nconst Wrapper = styled.section`\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    background-color: rgba(0, 0, 0, 0.8);\r\n`;\r\n\r\nconst InnerContainer = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 0;\r\n    padding: 2rem 1rem 0;\r\n    overflow-y: auto;\r\n    text-align: center;\r\n`;\r\n\r\nconst MemeTitle = styled(Title)`\r\n    color: ${({ theme }) => theme.colors.white};\r\n`;\r\n\r\nconst Image = styled.img`\r\n    display: inline-block;\r\n    width: 800px;\r\n    max-width: 100%;\r\n    margin-bottom: 2rem;\r\n`;\r\n\r\nconst Close = styled.div`\r\n    position: absolute;\r\n    top: 1rem;\r\n    right: 1rem;\r\n    color: ${({ theme }) => theme.colors.quaternary};\r\n    cursor: pointer;\r\n`;\r\n\r\nexport const Meme = ({ path, close }) => {\r\n    return (\r\n        <Wrapper onClick={close}>\r\n            <InnerContainer>\r\n                <MemeTitle as=\"h4\" fsize=\"1.5\" margin=\"0 0 2rem\">\r\n                    Click the image to download\r\n                </MemeTitle>\r\n                <a href={path} download=\"my-awesome-meme.png\">\r\n                    <Image src={path} alt=\"Generated Meme\" />\r\n                </a>\r\n            </InnerContainer>\r\n            <Close>Close</Close>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default Meme;\r\n","import React, { useState, useContext } from 'react';\r\nimport { MemeContext } from '../../../context/MemeContext';\r\nimport htmlToImage from 'html-to-image';\r\nimport Button from '../../global/Button';\r\nimport Wrapper from './Wrapper';\r\nimport Meme from './Meme';\r\n\r\nexport const GenerateImage = () => {\r\n    // Global state\r\n    // state to read and dispatch to modify\r\n    const meme = useContext(MemeContext);\r\n\r\n    // Local state\r\n    const [image, setImage] = useState(null);\r\n\r\n    // Methods\r\n    const generateMeme = () => {\r\n        htmlToImage\r\n            .toPng(document.getElementById('active-image'))\r\n            .then(function (dataUrl) {\r\n                var img = new Image();\r\n                img.src = dataUrl;\r\n                img.crossOrigin = 'anonymous';\r\n                setImage(img.src);\r\n            })\r\n            .catch(function (error) {\r\n                console.error('We have a problem:', error);\r\n            });\r\n    };\r\n\r\n    const resetMeme = () => {\r\n        meme.dispatch({ type: 'RESET_MEME' });\r\n    };\r\n\r\n    const closeMeme = () => {\r\n        setImage(null);\r\n    };\r\n\r\n    // Render\r\n    let memeImage;\r\n    if (image) {\r\n        memeImage = <Meme path={image} close={closeMeme} />;\r\n    }\r\n    return (\r\n        <Wrapper>\r\n            <Button\r\n                primary\r\n                margin=\"0 1rem 1rem 0\"\r\n                handleClick={generateMeme}\r\n                isDisabled={!meme.state.imageSelected}\r\n            >\r\n                Generate a new MEME\r\n            </Button>\r\n            <Button\r\n                margin=\"0 1rem 1rem 0\"\r\n                handleClick={resetMeme}\r\n                isDisabled={!meme.state.imageSelected}\r\n            >\r\n                Reset MEME settings\r\n            </Button>\r\n            {memeImage}\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default GenerateImage;\r\n","import React from 'react';\r\nimport { StateProvider } from '../../context/MemeContext';\r\nimport AppWrapper from '../layout/AppWrapper';\r\nimport Container from '../layout/Container';\r\nimport MainContent from '../layout/MainContent';\r\nimport Title from '../global/Title';\r\nimport Icon from '../global/Icon';\r\nimport logo from '../../assets/app-icon.svg';\r\nimport UploadImage from './UploadImage';\r\nimport TextImage from './TextImage';\r\nimport GenerateImage from './GenerateImage';\r\n\r\nconst App = () => {\r\n    return (\r\n        <AppWrapper>\r\n            <Container>\r\n                <Title primary fsize=\"2\" margin=\"0 0 2rem\">\r\n                    <Icon src={logo} alt=\"The MEME Generator\" />\r\n                    The MEME Generator\r\n                </Title>\r\n\r\n                {/* Shared global state from here on */}\r\n                <StateProvider>\r\n                    <MainContent>\r\n                        <UploadImage />\r\n\r\n                        <TextImage />\r\n                    </MainContent>\r\n\r\n                    <GenerateImage />\r\n                </StateProvider>\r\n            </Container>\r\n        </AppWrapper>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { ThemeProvider } from 'styled-components';\r\nimport Theme from './config/theme';\r\nimport GlobalStyle from './config/globalStyles';\r\n\r\nimport App from './components/App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <ThemeProvider theme={Theme}>\r\n            <GlobalStyle />\r\n            <App />\r\n        </ThemeProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// MAIN APP THEME\r\nexport default {\r\n    // https://draculatheme.com/contribute\r\n    colors: {\r\n        white: '#f8f8f2',\r\n        lightGray: '#bbbabc',\r\n        gray: '#777',\r\n        black: '#000',\r\n        default: '#f1fa8c',\r\n        primary: '#8be9fd',\r\n        secondary: '#bd93f9',\r\n        tertiary: '#ff79c6',\r\n        quaternary: '#50fa7b',\r\n        error: '#ff5555',\r\n    },\r\n    typography: {\r\n        mainFont: 'Open Sans',\r\n        baseFont: '16px',\r\n        colorFont: '#f8f8f2',\r\n        backColor: '#282a36',\r\n        bold: 700,\r\n        normal: 400,\r\n    },\r\n    layout: {\r\n        maxWidth: '1200px',\r\n        mdWidth: '768px',\r\n        smWidth: '600px',\r\n        xsWidth: '480px',\r\n    },\r\n};\r\n"],"sourceRoot":""}